{"version":3,"file":"index.js","sourceRoot":"lib/","sources":["schema-form/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EACZ,UAAU,EACV,UAAU,EACV,mBAAmB,EACnB,OAAO,GACR,MAAM,OAAO,CAAC;AACf,OAAO,EAAE,UAAU,CAAC,2BAA2B,EAAE,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,oBAAoB,CAAC,WAAW,EAAW,MAAM,gBAAgB,CAAC;AAC3E,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,KAAK,cAAc,MAAM,eAAe,CAAC;AAChD,OAAO,KAAK,SAAS,MAAM,SAAS,CAAC;AAUrC,gCAAgC;AAEhC,MAAM,CAAC,IAAM,UAAU,GAAG,UAAU,CAAC,UAAC,KAAsB,EAAE,GAAG;IAE7D,IAAA,MAAM,GAKJ,KAAK,OALD,EACN,KAIE,KAAK,MAJG,EAAV,KAAK,mBAAG,EAAE,KAAA,EACV,KAGE,KAAK,WAHQ,EAAf,UAAU,mBAAG,EAAE,KAAA,EACf,aAAa,GAEX,KAAK,cAFM,EACV,SAAS,UACV,KAAK,EANH,kDAML,CADa,CACJ;IACV,IAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAC5C,IAAM,IAAI,GAAG,OAAO,CAAC;QACnB,IAAI,WAAW,EAAE;YACf,OAAO,WAAW,CAAC;SACpB;aAAM;YACL,OAAO,UAAU,CAAC;gBAChB,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,aAAa,aAAb,aAAa,cAAb,aAAa,GAAI,EAAE,CAAC;qBAC/C,MAAM,CAAC,UAAC,EAAK;wBAAL,KAAA,aAAK,EAAJ,GAAG,QAAA;oBAAM,OAAA,aAAa,CAAC,GAAG,CAAC,KAAK,SAAS;gBAAhC,CAAgC,CAAC;qBACnD,MAAM,CAAC,UAAC,GAAG,EAAE,EAAY;;wBAAZ,KAAA,aAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;oBAAM,OAAA,uBAAM,GAAG,gBAAG,GAAG,IAAG,KAAK,OAAG;gBAA1B,CAA0B,EAAE,EAAE,CAAC;aACjE,CAAC,CAAC;SACJ;IACH,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;IAEjC,mBAAmB,CACjB,GAAG,EACH,cAAM,OAAA,CAAC;QACL,OAAO;YACL,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC,EAJI,CAIJ,EACF,CAAC,IAAI,CAAC,CACP,CAAC;IACF,OAAO,CACL,oBAAC,IAAI,aAAC,IAAI,EAAE,IAAI,IAAM,SAAS;QAC7B,oBAAC,YAAY,IACX,MAAM,EAAE,MAAM,EACd,KAAK,wBACA,SAAS,GACT,KAAK,GAEV,UAAU,aACR,cAAc,gBAAA,IACX,UAAU,IAEf,EACD,KAAK,aAAL,KAAK;QAAL,KAAK,CAAE,QAAQ,CAIX,CACR,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,UAAU,CAAC","sourcesContent":["import React, {\r\n  forwardRef,\r\n  useContext,\r\n  useImperativeHandle,\r\n  useMemo,\r\n} from \"react\";\r\nimport { createForm /* , setValidateLanguage */ } from \"@formily/core\";\r\nimport { /* FormConsumer,  */ FormContext, ISchema } from \"@formily/react\";\r\nimport { Form, SchemaRender } from \"../index\";\r\nimport * as componentsBase from \"../components\";\r\nimport * as scopeBase from \"./scope\";\r\n\r\ninterface SchemaFormProps {\r\n  schema: ISchema;\r\n  scope?: { [key: string]: any };\r\n  components?: any;\r\n  initialValues?: any;\r\n  [key: string]: any;\r\n}\r\n\r\n// setValidateLanguage('zh-CN');\r\n\r\nexport const SchemaForm = forwardRef((props: SchemaFormProps, ref) => {\r\n  const {\r\n    schema,\r\n    scope = {},\r\n    components = {},\r\n    initialValues,\r\n    ...restProps\r\n  } = props;\r\n  const contextForm = useContext(FormContext);\r\n  const form = useMemo(() => {\r\n    if (contextForm) {\r\n      return contextForm;\r\n    } else {\r\n      return createForm({\r\n        initialValues: Object.entries(initialValues ?? {})\r\n          .filter(([key]) => initialValues[key] !== undefined)\r\n          .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),\r\n      });\r\n    }\r\n  }, [initialValues, contextForm]);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => ({\r\n      getForm() {\r\n        return form;\r\n      },\r\n    }),\r\n    [form]\r\n  );\r\n  return (\r\n    <Form form={form} {...restProps}>\r\n      <SchemaRender\r\n        schema={schema}\r\n        scope={{\r\n          ...scopeBase,\r\n          ...scope,\r\n        }}\r\n        components={{\r\n          componentsBase,\r\n          ...components,\r\n        }}\r\n      />\r\n      {props?.children}\r\n      {/* <FormConsumer>\r\n         {() => <div>{JSON.stringify(form.values ?? {})}</div>}\r\n       </FormConsumer> */}\r\n    </Form>\r\n  );\r\n});\r\n\r\nexport default SchemaForm;\r\n"]}