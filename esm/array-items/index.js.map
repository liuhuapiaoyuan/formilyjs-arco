{"version":3,"file":"index.js","sourceRoot":"lib/","sources":["array-items/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { ArrayField } from '@formily/core'\r\nimport {\r\n  useField,\r\n  observer,\r\n  useFieldSchema,\r\n  RecursionField,\r\n} from '@formily/react'\r\nimport cls from 'classnames'\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\r\nimport { ISchema } from '@formily/json-schema'\r\nimport { usePrefixCls } from '../__builtins__'\r\nimport { ArrayBase, ArrayBaseMixins } from '../array-base'\r\nimport './index.scss'\r\n\r\ntype ComposedArrayItems = React.FC<React.HTMLAttributes<HTMLDivElement>> &\r\n  ArrayBaseMixins & {\r\n    Item?: React.FC<\r\n      React.HTMLAttributes<HTMLDivElement> & {\r\n        type?: 'card' | 'divide'\r\n      }\r\n    >\r\n  }\r\n\r\nconst SortableItem = SortableElement(\r\n  (props: React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>) => {\r\n    const prefixCls = usePrefixCls('formily-array-items')\r\n    return (\r\n      <div {...props} className={cls(`${prefixCls}-item`, props.className)}>\r\n        {props.children}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nconst SortableList = SortableContainer(\r\n  (props: React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>) => {\r\n    const prefixCls = usePrefixCls('formily-array-items')\r\n    return (\r\n      <div {...props} className={cls(`${prefixCls}-list`, props.className)}>\r\n        {props.children}\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nconst isAdditionComponent = (schema: ISchema) => {\r\n  return schema['x-component']?.indexOf('Addition') > -1\r\n}\r\n\r\nconst useAddition = () => {\r\n  const schema = useFieldSchema()\r\n  return schema.reduceProperties((addition, schema, key) => {\r\n    if (isAdditionComponent(schema)) {\r\n      return <RecursionField schema={schema} name={key} />\r\n    }\r\n    return addition\r\n  }, null)\r\n}\r\n\r\nexport const ArrayItems: ComposedArrayItems = observer((props) => {\r\n  const field = useField<ArrayField>()\r\n  const prefixCls = usePrefixCls('formily-array-items')\r\n  const schema = useFieldSchema()\r\n  const addition = useAddition()\r\n  const dataSource = Array.isArray(field.value) ? field.value : []\r\n  if (!schema) throw new Error('can not found schema object')\r\n  return (\r\n    <ArrayBase>\r\n      <div\r\n        {...props}\r\n        onChange={() => {}}\r\n        className={cls(prefixCls, props.className)}\r\n      >\r\n        <SortableList\r\n          useDragHandle\r\n          lockAxis=\"y\"\r\n          helperClass={`${prefixCls}-sort-helper`}\r\n          onSortEnd={({ oldIndex, newIndex }) => {\r\n            field.move(oldIndex, newIndex)\r\n          }}\r\n        >\r\n          {dataSource?.map((item, index) => {\r\n            const items = Array.isArray(schema.items)\r\n              ? schema.items[index] || schema.items[0]\r\n              : schema.items\r\n            return (\r\n              <ArrayBase.Item key={index} index={index} record={item}>\r\n                <SortableItem key={`item-${index}`} index={index}>\r\n                  <div className={`${prefixCls}-item-inner`}>\r\n                    <RecursionField schema={items as any} name={index} />\r\n                  </div>\r\n                </SortableItem>\r\n              </ArrayBase.Item>\r\n            )\r\n          })}\r\n        </SortableList>\r\n        {addition}\r\n      </div>\r\n    </ArrayBase>\r\n  )\r\n})\r\n\r\nArrayItems.displayName = 'ArrayItems'\r\n\r\nArrayItems.Item = (props) => {\r\n  const prefixCls = usePrefixCls('formily-array-items')\r\n  return (\r\n    <div\r\n      {...props}\r\n      onChange={() => {}}\r\n      className={cls(`${prefixCls}-${props.type || 'card'}`, props.className)}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nArrayBase.mixin(ArrayItems)\r\n\r\nexport default ArrayItems\r\n"]}