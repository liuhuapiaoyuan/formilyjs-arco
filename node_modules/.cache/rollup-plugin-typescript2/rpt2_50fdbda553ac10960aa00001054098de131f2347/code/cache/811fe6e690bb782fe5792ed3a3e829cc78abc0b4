{"code":"import { useRef, useEffect } from 'react';\r\nvar defaultEvent = 'click';\r\nfunction getTargetElement(target, defaultElement) {\r\n    if (!target) {\r\n        return defaultElement;\r\n    }\r\n    var targetElement;\r\n    if (typeof target === 'function') {\r\n        targetElement = target();\r\n    }\r\n    else if ('current' in target) {\r\n        targetElement = target.current;\r\n    }\r\n    else {\r\n        targetElement = target;\r\n    }\r\n    return targetElement;\r\n}\r\nexport var useClickAway = function (onClickAway, target, eventName) {\r\n    if (eventName === void 0) { eventName = defaultEvent; }\r\n    var onClickAwayRef = useRef(onClickAway);\r\n    onClickAwayRef.current = onClickAway;\r\n    useEffect(function () {\r\n        var handler = function (event) {\r\n            var targets = Array.isArray(target) ? target : [target];\r\n            if (targets.some(function (targetItem) {\r\n                var targetElement = getTargetElement(targetItem);\r\n                return !targetElement || (targetElement === null || targetElement === void 0 ? void 0 : targetElement.contains(event.target));\r\n            })) {\r\n                return;\r\n            }\r\n            onClickAwayRef.current(event);\r\n        };\r\n        document.addEventListener(eventName, handler);\r\n        return function () {\r\n            document.removeEventListener(eventName, handler);\r\n        };\r\n    }, [target, eventName]);\r\n};\r\n//# sourceMappingURL=useClickAway.js.map","references":["H:/projects/formilyjs-arco/node_modules/@types/react/index.d.ts"],"map":"{\"version\":3,\"file\":\"useClickAway.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/__builtins__/hooks/useClickAway.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,SAAS,EAAoB,MAAM,OAAO,CAAA;AAE3D,IAAM,YAAY,GAAG,OAAO,CAAA;AAY5B,SAAS,gBAAgB,CACvB,MAAmC,EACnC,cAA8B;IAE9B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,cAAc,CAAA;KACtB;IAED,IAAI,aAA+C,CAAA;IAEnD,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,aAAa,GAAG,MAAM,EAAE,CAAA;KACzB;SAAM,IAAI,SAAS,IAAI,MAAM,EAAE;QAC9B,aAAa,GAAG,MAAM,CAAC,OAAO,CAAA;KAC/B;SAAM;QACL,aAAa,GAAG,MAAM,CAAA;KACvB;IAED,OAAO,aAAa,CAAA;AACtB,CAAC;AAED,MAAM,CAAC,IAAM,YAAY,GAAG,UAC1B,WAAuC,EACvC,MAAmC,EACnC,SAAgC;IAAhC,0BAAA,EAAA,wBAAgC;IAEhC,IAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,CAAA;IAC1C,cAAc,CAAC,OAAO,GAAG,WAAW,CAAA;IAEpC,SAAS,CAAC;QACR,IAAM,OAAO,GAAG,UAAC,KAAU;YACzB,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;YACzD,IACE,OAAO,CAAC,IAAI,CAAC,UAAC,UAAU;gBACtB,IAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,CAAgB,CAAA;gBACjE,OAAO,CAAC,aAAa,KAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,CAAA;YAChE,CAAC,CAAC,EACF;gBACA,OAAM;aACP;YACD,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC/B,CAAC,CAAA;QAED,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAE7C,OAAO;YACL,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAClD,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAA;AACzB,CAAC,CAAA\",\"sourcesContent\":[\"import { useRef, useEffect, MutableRefObject } from 'react'\\r\\n\\r\\nconst defaultEvent = 'click'\\r\\n\\r\\ntype EventType = MouseEvent | TouchEvent\\r\\n\\r\\ntype BasicTarget<T = HTMLElement> =\\r\\n  | (() => T | null)\\r\\n  | T\\r\\n  | null\\r\\n  | MutableRefObject<T | null | undefined>\\r\\n\\r\\ntype TargetElement = HTMLElement | Element | Document | Window\\r\\n\\r\\nfunction getTargetElement(\\r\\n  target?: BasicTarget<TargetElement>,\\r\\n  defaultElement?: TargetElement\\r\\n): TargetElement | undefined | null {\\r\\n  if (!target) {\\r\\n    return defaultElement\\r\\n  }\\r\\n\\r\\n  let targetElement: TargetElement | undefined | null\\r\\n\\r\\n  if (typeof target === 'function') {\\r\\n    targetElement = target()\\r\\n  } else if ('current' in target) {\\r\\n    targetElement = target.current\\r\\n  } else {\\r\\n    targetElement = target\\r\\n  }\\r\\n\\r\\n  return targetElement\\r\\n}\\r\\n\\r\\nexport const useClickAway = (\\r\\n  onClickAway: (event: EventType) => void,\\r\\n  target: BasicTarget | BasicTarget[],\\r\\n  eventName: string = defaultEvent\\r\\n) => {\\r\\n  const onClickAwayRef = useRef(onClickAway)\\r\\n  onClickAwayRef.current = onClickAway\\r\\n\\r\\n  useEffect(() => {\\r\\n    const handler = (event: any) => {\\r\\n      const targets = Array.isArray(target) ? target : [target]\\r\\n      if (\\r\\n        targets.some((targetItem) => {\\r\\n          const targetElement = getTargetElement(targetItem) as HTMLElement\\r\\n          return !targetElement || targetElement?.contains(event.target)\\r\\n        })\\r\\n      ) {\\r\\n        return\\r\\n      }\\r\\n      onClickAwayRef.current(event)\\r\\n    }\\r\\n\\r\\n    document.addEventListener(eventName, handler)\\r\\n\\r\\n    return () => {\\r\\n      document.removeEventListener(eventName, handler)\\r\\n    }\\r\\n  }, [target, eventName])\\r\\n}\\r\\n\"]}"}
