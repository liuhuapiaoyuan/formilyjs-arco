{"code":"import { __assign, __read } from \"tslib\";\r\nimport React, { Fragment, useState } from 'react';\r\nimport { Tabs, Badge } from '@arco-design/web-react';\r\nimport { useField, observer, useFieldSchema, RecursionField, } from '@formily/react';\r\nimport cls from 'classnames';\r\nimport './index.scss';\r\nimport { usePrefixCls } from '../__builtins__';\r\nvar TabPane = Tabs.TabPane;\r\nvar FeedbackBadge = observer(function (props) {\r\n    var field = useField();\r\n    var tab = \"\".concat(field.title || 'Untitled', \" \").concat(props.index + 1);\r\n    var errors = field.errors.filter(function (error) {\r\n        return error.address.includes(\"\".concat(field.address, \".\").concat(props.index));\r\n    });\r\n    if (errors.length) {\r\n        return (React.createElement(Badge, { className: \"errors-badge\", count: errors.length, color: \"danger\" }, tab));\r\n    }\r\n    return React.createElement(Fragment, null, tab);\r\n});\r\nexport var ArrayTabs = observer(function (props) {\r\n    var field = useField();\r\n    var schema = useFieldSchema();\r\n    var prefix = usePrefixCls('tabs');\r\n    var _a = __read(useState('tab-0'), 2), activeKey = _a[0], setActiveKey = _a[1];\r\n    var value = Array.isArray(field.value) ? field.value : [];\r\n    var dataSource = (value === null || value === void 0 ? void 0 : value.length) ? value : [{}];\r\n    var onEdit = function (targetKey, type) {\r\n        var _a, _b;\r\n        if (type == 'add') {\r\n            var id = dataSource.length;\r\n            if ((_a = field === null || field === void 0 ? void 0 : field.value) === null || _a === void 0 ? void 0 : _a.length) {\r\n                field.push(null);\r\n            }\r\n            else {\r\n                field.push(null, null);\r\n            }\r\n            setActiveKey(\"tab-\".concat(id));\r\n        }\r\n        else if (type == 'remove') {\r\n            var index = Number((_b = targetKey.match(/-(\\d+)/)) === null || _b === void 0 ? void 0 : _b[1]);\r\n            if (index - 1 > -1) {\r\n                setActiveKey(\"tab-\".concat(index - 1));\r\n            }\r\n            field.remove(index);\r\n        }\r\n    };\r\n    return (React.createElement(Tabs, __assign({}, props, { className: cls(prefix, props.className), activeTab: activeKey, onChange: function (key) {\r\n            var _a;\r\n            // 获取当前tab的index eg:tab-1=>1\r\n            var index = Number((_a = key.match(/-(\\d+)/)) === null || _a === void 0 ? void 0 : _a[1]);\r\n            if (dataSource.length !== index) {\r\n                setActiveKey(key);\r\n            }\r\n        }, type: \"card\", onAddTab: onEdit.bind(null, null, 'add'), \r\n        /*   extra={\r\n          <Button\r\n            icon={<IconPlus />}\r\n            className={cls(`${prefix}-addition`)}\r\n            onClick={onEdit.bind(null, null, 'add')}\r\n          />\r\n        } */\r\n        editable: true, onDeleteTab: function (key) { return onEdit(key, 'remove'); } }), dataSource === null || dataSource === void 0 ? void 0 : dataSource.map(function (_, index) {\r\n        var items = Array.isArray(schema.items)\r\n            ? schema.items[index]\r\n            : schema.items;\r\n        var key = \"tab-\".concat(index);\r\n        return (React.createElement(TabPane, { key: key, closable: index !== 0, title: React.createElement(FeedbackBadge, { index: index }) },\r\n            React.createElement(RecursionField, { schema: items, name: index })));\r\n    })));\r\n});\r\nexport default ArrayTabs;\r\n//# sourceMappingURL=index.js.map","references":["H:/projects/formilyjs-arco/node_modules/@types/react/index.d.ts","H:/projects/formilyjs-arco/node_modules/@arco-design/web-react/es/index.d.ts","H:/projects/formilyjs-arco/node_modules/@formily/core/esm/index.d.ts","H:/projects/formilyjs-arco/node_modules/@formily/react/esm/index.d.ts","H:/projects/formilyjs-arco/node_modules/classnames/index.d.ts","H:/projects/formilyjs-arco/node_modules/@arco-design/web-react/es/tabs/index.d.ts","H:/projects/formilyjs-arco/packages/components/src/__builtins__/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/array-tabs/index.tsx\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { Fragment, useState } from 'react'\\nimport { Tabs, Badge } from '@arco-design/web-react'\\nimport { ArrayField } from '@formily/core'\\nimport {\\n  useField,\\n  observer,\\n  useFieldSchema,\\n  RecursionField,\\n  ReactFC,\\n} from '@formily/react'\\nimport cls from 'classnames'\\nimport { TabsProps } from '@arco-design/web-react/es/tabs'\\n\\nimport './index.scss'\\nimport { usePrefixCls } from '../__builtins__'\\nconst TabPane = Tabs.TabPane\\ninterface IFeedbackBadgeProps {\\n  index: number\\n}\\nconst FeedbackBadge: ReactFC<IFeedbackBadgeProps> = observer((props) => {\\n  const field = useField<ArrayField>()\\n  const tab = `${field.title || 'Untitled'} ${props.index + 1}`\\n  const errors = field.errors.filter((error) =>\\n    error.address.includes(`${field.address}.${props.index}`)\\n  )\\n  if (errors.length) {\\n    return (\\n      <Badge className=\\\"errors-badge\\\" count={errors.length} color=\\\"danger\\\">\\n        {tab}\\n      </Badge>\\n    )\\n  }\\n  return <Fragment>{tab}</Fragment>\\n})\\n\\nexport const ArrayTabs: React.FC<TabsProps> = observer((props) => {\\n  const field = useField<ArrayField>()\\n  const schema = useFieldSchema()\\n  const prefix = usePrefixCls('tabs')\\n  const [activeKey, setActiveKey] = useState('tab-0')\\n  const value = Array.isArray(field.value) ? field.value : []\\n  const dataSource = value?.length ? value : [{}]\\n  const onEdit = (targetKey: any, type: 'add' | 'remove') => {\\n    if (type == 'add') {\\n      const id = dataSource.length\\n      if (field?.value?.length) {\\n        field.push(null)\\n      } else {\\n        field.push(null, null)\\n      }\\n      setActiveKey(`tab-${id}`)\\n    } else if (type == 'remove') {\\n      const index = Number(targetKey.match(/-(\\\\d+)/)?.[1])\\n      if (index - 1 > -1) {\\n        setActiveKey(`tab-${index - 1}`)\\n      }\\n      field.remove(index)\\n    }\\n  }\\n  return (\\n    <Tabs\\n      {...props}\\n      className={cls(prefix, props.className)}\\n      activeTab={activeKey}\\n      onChange={(key) => {\\n        // 获取当前tab的index eg:tab-1=>1\\n        const index = Number(key.match(/-(\\\\d+)/)?.[1])\\n        if (dataSource.length !== index) {\\n          setActiveKey(key)\\n        }\\n      }}\\n      type=\\\"card\\\"\\n      onAddTab={onEdit.bind(null, null, 'add')}\\n      /*   extra={\\n        <Button\\n          icon={<IconPlus />}\\n          className={cls(`${prefix}-addition`)}\\n          onClick={onEdit.bind(null, null, 'add')}\\n        />\\n      } */\\n      editable\\n      onDeleteTab={(key) => onEdit(key, 'remove')}\\n    >\\n      {dataSource?.map((_, index) => {\\n        const items = Array.isArray(schema.items)\\n          ? schema.items[index]\\n          : (schema.items as any)\\n        const key = `tab-${index}`\\n        return (\\n          <TabPane\\n            key={key}\\n            closable={index !== 0}\\n            title={<FeedbackBadge index={index} />}\\n          >\\n            <RecursionField schema={items} name={index} />\\n          </TabPane>\\n        )\\n      })}\\n    </Tabs>\\n  )\\n})\\n\\nexport default ArrayTabs\\n\"]}"}
