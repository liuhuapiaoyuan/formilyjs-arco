{"code":"import { __assign, __read, __spreadArray } from \"tslib\";\r\nimport React, { useLayoutEffect, useRef, useState, useContext } from 'react';\r\nimport { usePrefixCls, pickDataProps } from '../__builtins__';\r\nimport cls from 'classnames';\r\nimport { isValid, isNum, isBool, isEqual } from '@formily/shared';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { FormGridContext } from './context';\r\nimport './index.scss';\r\nvar S = 720;\r\nvar MD = 1280;\r\nvar LG = 1920;\r\nvar useLayout = function (props) {\r\n    var intervals = props.intervals, minColumns = props.minColumns, maxColumns = props.maxColumns, minWidth = props.minWidth, maxWidth = props.maxWidth, colWrap = props.colWrap, columnGap = props.columnGap, rowGap = props.rowGap;\r\n    var ref = useRef(null);\r\n    var formGridPrefixCls = usePrefixCls('grid');\r\n    var _a = __read(useState({}), 2), layoutParams = _a[0], setLayout = _a[1];\r\n    var _b = __read(useState({}), 2), styles = _b[0], setStyles = _b[1];\r\n    var calculateSmartColumns = function (target) {\r\n        var _a;\r\n        var clientWidth = target.clientWidth;\r\n        var index = intervals.findIndex(function (interval) {\r\n            var _a = __read(interval, 2), min = _a[0], max = _a[1];\r\n            if (clientWidth >= min && max > clientWidth) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        var takeMaxColumns = function () {\r\n            return (maxColumns === null || maxColumns === void 0 ? void 0 : maxColumns[index]) || maxColumns;\r\n        };\r\n        var takeMinColumns = function () {\r\n            return (minColumns === null || minColumns === void 0 ? void 0 : minColumns[index]) || minColumns || 1;\r\n        };\r\n        var takeColwrap = function () {\r\n            return (colWrap === null || colWrap === void 0 ? void 0 : colWrap[index]) || colWrap || true;\r\n        };\r\n        var takeMinWidth = function () {\r\n            var rMaxColumns = takeMaxColumns();\r\n            if (isValid(minWidth)) {\r\n                return minWidth[index] || 0;\r\n            }\r\n            else {\r\n                if (isValid(rMaxColumns)) {\r\n                    return Math.floor((clientWidth - (rMaxColumns - 1) * props.columnGap) / rMaxColumns);\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n        };\r\n        var takeMaxWidth = function () {\r\n            var rMinColumns = takeMinColumns();\r\n            if (isValid(maxWidth)) {\r\n                return maxWidth[index] || 0;\r\n            }\r\n            else {\r\n                if (isValid(rMinColumns)) {\r\n                    var calculated = Math.floor((clientWidth - (minColumns[index] - 1) * props.columnGap) /\r\n                        minColumns[index]);\r\n                    if (Infinity === calculated) {\r\n                        return clientWidth;\r\n                    }\r\n                    return calculated;\r\n                }\r\n                else {\r\n                    return Infinity;\r\n                }\r\n            }\r\n        };\r\n        return {\r\n            minWidth: takeMinWidth(),\r\n            maxWidth: takeMaxWidth(),\r\n            columns: (_a = target === null || target === void 0 ? void 0 : target.childNodes) === null || _a === void 0 ? void 0 : _a.length,\r\n            colWrap: takeColwrap(),\r\n            minColumns: takeMinColumns(),\r\n            maxColumns: takeMaxColumns(),\r\n            clientWidth: clientWidth,\r\n        };\r\n    };\r\n    useLayoutEffect(function () {\r\n        var observer = function () {\r\n            if (!ref.current)\r\n                return;\r\n            var params = calculateSmartColumns(ref.current);\r\n            setLayout(params);\r\n            var style = getStyle({ columnGap: columnGap, rowGap: rowGap, layoutParams: params, ref: ref });\r\n            if (!isEqual(style, styles)) {\r\n                setStyles(style);\r\n            }\r\n        };\r\n        var resizeObserver = new ResizeObserver(observer);\r\n        var mutationObserver = new MutationObserver(observer);\r\n        if (ref.current) {\r\n            resizeObserver.observe(ref.current);\r\n            mutationObserver.observe(ref.current, {\r\n                childList: true,\r\n            });\r\n        }\r\n        return function () {\r\n            if (!ref.current)\r\n                return;\r\n            resizeObserver.unobserve(ref.current);\r\n            mutationObserver.disconnect();\r\n        };\r\n    }, []);\r\n    return {\r\n        ref: ref,\r\n        formGridPrefixCls: formGridPrefixCls,\r\n        layoutParams: layoutParams,\r\n        styles: styles,\r\n    };\r\n};\r\nvar getStyle = function (props) {\r\n    var _a;\r\n    var columnGap = props.columnGap, rowGap = props.rowGap, layoutParams = props.layoutParams, ref = props.ref;\r\n    // const max = layoutParams.maxWidth ? `${layoutParams.maxWidth}px` : '1fr';\r\n    var _b = layoutParams, clientWidth = _b.clientWidth, minWidth = _b.minWidth, maxColumns = _b.maxColumns, minColumns = _b.minColumns;\r\n    var getMinMax = function (minWidth, maxWidth) {\r\n        if (!minWidth || !maxWidth)\r\n            return;\r\n        var minmax;\r\n        if (minWidth === Infinity) {\r\n            if (!isValid(maxWidth)) {\r\n                minmax = '1fr';\r\n            }\r\n            else {\r\n                minmax = \"minmax(0px,\".concat(maxWidth, \"px)\");\r\n            }\r\n        }\r\n        else {\r\n            minmax = \"minmax(\".concat(minWidth, \"px,\").concat(isValid(maxWidth) ? \"\".concat(maxWidth, \"px\") : '1fr', \")\");\r\n        }\r\n        return minmax;\r\n    };\r\n    var spans = Array.from(((_a = ref.current) === null || _a === void 0 ? void 0 : _a.childNodes) || []).reduce(function (buf, cur) {\r\n        var span = isValid(maxColumns)\r\n            ? Math.min((Number(cur.getAttribute('data-span')) || 1), maxColumns)\r\n            : Number(cur.getAttribute('data-span')) || 1;\r\n        return buf + Number(span);\r\n    }, 0);\r\n    var calc = Math.floor((clientWidth + columnGap) / (minWidth + columnGap));\r\n    var finalColumns;\r\n    finalColumns = Math.min(spans, calc);\r\n    if (isValid(maxColumns)) {\r\n        finalColumns = Math.min(spans, calc, maxColumns);\r\n    }\r\n    else {\r\n        finalColumns = Math.min(spans, calc);\r\n    }\r\n    if (isValid(minColumns)) {\r\n        if (finalColumns < minColumns) {\r\n            finalColumns = minColumns;\r\n        }\r\n    }\r\n    var style = {\r\n        gridTemplateColumns: \"repeat(\".concat(finalColumns, \", \").concat(getMinMax(layoutParams === null || layoutParams === void 0 ? void 0 : layoutParams.minWidth, layoutParams === null || layoutParams === void 0 ? void 0 : layoutParams.maxWidth), \")\"),\r\n        gridGap: \"\".concat(rowGap, \"px \").concat(columnGap, \"px\"),\r\n    };\r\n    return style;\r\n};\r\nexport var useGridSpan = function (gridSpan) {\r\n    if (gridSpan === void 0) { gridSpan = 1; }\r\n    var params = useContext(FormGridContext);\r\n    if (!isValid(params)) {\r\n        return gridSpan;\r\n    }\r\n    var colWrap = params.colWrap, _a = params.columns, columns = _a === void 0 ? Infinity : _a, clientWidth = params.clientWidth, minWidth = params.minWidth, columnGap = params.columnGap, _b = params.maxColumns, maxColumns = _b === void 0 ? Infinity : _b;\r\n    var calc = Math.floor((clientWidth + columnGap) / (minWidth + columnGap)); // 算出实际一行最多能塞进的格子数\r\n    if (colWrap === true) {\r\n        if (Math.min(calc, columns) >= gridSpan) {\r\n            if (isValid(maxColumns)) {\r\n                return Math.min(gridSpan, maxColumns);\r\n            }\r\n            return gridSpan;\r\n        }\r\n        else {\r\n            if (isValid(maxColumns)) {\r\n                return Math.min(calc, columns, maxColumns);\r\n            }\r\n            return Math.min(calc, columns);\r\n        }\r\n    }\r\n    else {\r\n        if (Math.min(calc, columns) >= gridSpan) {\r\n            if (isValid(maxColumns)) {\r\n                return Math.min(gridSpan, maxColumns);\r\n            }\r\n            return gridSpan;\r\n        }\r\n        else {\r\n            if (isValid(maxColumns)) {\r\n                return Math.min(calc, columns, maxColumns);\r\n            }\r\n            return Math.min(calc, columns);\r\n        }\r\n    }\r\n};\r\nexport var FormGrid = function (props) {\r\n    var normalizeProps = function (props) {\r\n        var breakpoints = props.breakpoints;\r\n        var intervals = breakpoints ? breakpoints.reduce(function (buf, cur, index, array) {\r\n            if (index === array.length - 1) {\r\n                return __spreadArray(__spreadArray([], __read(buf), false), [[array[index], Infinity]], false);\r\n            }\r\n            if (index === 0) {\r\n                return __spreadArray(__spreadArray([], __read(buf), false), [[0, cur], [cur, array[index + 1]]], false);\r\n            }\r\n            return __spreadArray(__spreadArray([], __read(buf), false), [[cur, array[index + 1]]], false);\r\n        }, []) : [];\r\n        var normalize = function (prop) {\r\n            if (isNum(prop) || isBool(prop)) {\r\n                return intervals.map(function () { return prop; });\r\n            }\r\n            else if (Array.isArray(prop)) {\r\n                var lastVal_1;\r\n                return intervals.map(function (it, idx) {\r\n                    var res = isValid(prop[idx]) ? prop[idx] : lastVal_1;\r\n                    lastVal_1 = isValid(prop[idx]) ? prop[idx] : lastVal_1;\r\n                    return res;\r\n                });\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        };\r\n        return __assign(__assign({}, props), { intervals: intervals, colWrap: normalize(props.colWrap), minWidth: normalize(props.minWidth), maxWidth: normalize(props.maxWidth), minColumns: normalize(props.minColumns), maxColumns: normalize(props.maxColumns) });\r\n    };\r\n    var children = props.children;\r\n    var normalizedProps = normalizeProps(props);\r\n    var _a = useLayout(normalizedProps), ref = _a.ref, formGridPrefixCls = _a.formGridPrefixCls, layoutParams = _a.layoutParams, styles = _a.styles;\r\n    return (React.createElement(FormGridContext.Provider, { value: __assign({ columnGap: props.columnGap }, layoutParams) },\r\n        React.createElement(\"div\", __assign({}, pickDataProps(props), { className: cls(\"\".concat(formGridPrefixCls, \"-layout\")), style: styles, ref: ref }), children)));\r\n};\r\nexport var GridColumn = function (_a) {\r\n    var gridSpan = _a.gridSpan, children = _a.children;\r\n    var span = FormGrid.useGridSpan(gridSpan);\r\n    return (React.createElement(\"div\", { style: { gridColumnStart: \"span \".concat(span) }, \"data-span\": span || 1 }, children));\r\n};\r\nGridColumn.defaultProps = {\r\n    gridSpan: 1,\r\n};\r\nFormGrid.useGridSpan = useGridSpan;\r\nFormGrid.GridColumn = GridColumn;\r\nFormGrid.defaultProps = {\r\n    columnGap: 10,\r\n    rowGap: 5,\r\n    minColumns: 0,\r\n    minWidth: 100,\r\n    breakpoints: [S, MD, LG],\r\n    colWrap: true,\r\n};\r\nexport default FormGrid;\r\n//# sourceMappingURL=index.js.map","references":["H:/projects/formilyjs-arco/node_modules/@types/react/index.d.ts","H:/projects/formilyjs-arco/packages/components/src/__builtins__/index.ts","H:/projects/formilyjs-arco/node_modules/classnames/index.d.ts","H:/projects/formilyjs-arco/node_modules/@formily/shared/esm/index.d.ts","H:/projects/formilyjs-arco/node_modules/resize-observer-polyfill/src/index.d.ts","H:/projects/formilyjs-arco/packages/components/src/form-grid/context.tsx"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/form-grid/index.tsx\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useLayoutEffect, useRef, useState, useContext } from 'react'\\r\\nimport { usePrefixCls, pickDataProps } from '../__builtins__'\\r\\nimport cls from 'classnames'\\r\\nimport { isValid, isNum, isBool, isEqual } from '@formily/shared'\\r\\nimport ResizeObserver from 'resize-observer-polyfill'\\r\\nimport { FormGridContext } from './context'\\r\\n\\r\\nimport './index.scss';\\r\\n\\r\\ninterface ILayout {\\r\\n  ref: React.MutableRefObject<HTMLDivElement>\\r\\n  formGridPrefixCls: string\\r\\n  layoutParams: {\\r\\n    minWidth?: number\\r\\n    columns?: number\\r\\n    colWrap?: boolean\\r\\n    maxWidth?: number\\r\\n    minColumns?: number\\r\\n    maxColumns?: number\\r\\n  }\\r\\n  styles: React.CSSProperties\\r\\n}\\r\\n\\r\\ninterface ILayoutProps {\\r\\n  minWidth: number[]\\r\\n  maxWidth: number[]\\r\\n  minColumns: number[]\\r\\n  maxColumns: number[]\\r\\n  intervals: Array<number[]>\\r\\n  colWrap: boolean[]\\r\\n  columnGap: number\\r\\n  rowGap: number\\r\\n}\\r\\n\\r\\nexport interface IFormGridProps {\\r\\n  minWidth?: number | number[]\\r\\n  maxWidth?: number | number[]\\r\\n  minColumns?: number | number[]\\r\\n  maxColumns?: number | number[]\\r\\n  colWrap?: boolean | boolean[]\\r\\n  breakpoints?: number[]\\r\\n  columnGap: number\\r\\n  rowGap: number\\r\\n}\\r\\n\\r\\ninterface IStyle {\\r\\n  [key: string]: string\\r\\n}\\r\\n\\r\\ninterface IStyleProps extends IFormGridProps {\\r\\n  layoutParams?: {\\r\\n    minWidth?: number\\r\\n    columns?: number\\r\\n    colWrap?: boolean\\r\\n    maxWidth?: number\\r\\n    clientWidth?: number\\r\\n    maxColumns?: number\\r\\n    minColumns: number\\r\\n  }\\r\\n  ref: React.MutableRefObject<HTMLDivElement>\\r\\n}\\r\\n\\r\\nexport interface IGridColumnProps {\\r\\n  gridSpan: number\\r\\n}\\r\\n\\r\\ntype ComposedFormGrid = React.FC<IFormGridProps> & {\\r\\n  GridColumn: React.FC<IGridColumnProps>\\r\\n  useGridSpan: (gridSpan: number) => number\\r\\n}\\r\\n\\r\\nconst S = 720\\r\\nconst MD = 1280\\r\\nconst LG = 1920\\r\\n\\r\\nconst useLayout = (props: ILayoutProps): ILayout => {\\r\\n  const {\\r\\n    intervals,\\r\\n    minColumns,\\r\\n    maxColumns,\\r\\n    minWidth,\\r\\n    maxWidth,\\r\\n    colWrap,\\r\\n    columnGap,\\r\\n    rowGap,\\r\\n  } = props\\r\\n  const ref = useRef<HTMLDivElement>(null) as React.MutableRefObject<HTMLInputElement>;\\r\\n  const formGridPrefixCls = usePrefixCls('grid')\\r\\n  const [layoutParams, setLayout] = useState({})\\r\\n  const [styles, setStyles] = useState({})\\r\\n\\r\\n  const calculateSmartColumns = (target: HTMLElement) => {\\r\\n    const { clientWidth } = target\\r\\n    const index = intervals.findIndex((interval) => {\\r\\n      const [min, max] = interval\\r\\n      if (clientWidth >= min && max > clientWidth) {\\r\\n        return true\\r\\n      }\\r\\n      return false\\r\\n    })\\r\\n\\r\\n    const takeMaxColumns = () => {\\r\\n      return maxColumns?.[index] || maxColumns\\r\\n    }\\r\\n\\r\\n    const takeMinColumns = () => {\\r\\n      return minColumns?.[index] || minColumns || 1\\r\\n    }\\r\\n\\r\\n    const takeColwrap = (): boolean => {\\r\\n      return colWrap?.[index] || colWrap as any || true\\r\\n    }\\r\\n\\r\\n    const takeMinWidth = () => {\\r\\n      const rMaxColumns = takeMaxColumns() as number\\r\\n      if (isValid(minWidth)) {\\r\\n        return minWidth[index] || 0\\r\\n      } else {\\r\\n        if (isValid(rMaxColumns)) {\\r\\n          return Math.floor(\\r\\n            (clientWidth - (rMaxColumns - 1) * props.columnGap) / rMaxColumns\\r\\n          )\\r\\n        } else {\\r\\n          return 0\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    const takeMaxWidth = () => {\\r\\n      const rMinColumns = takeMinColumns()\\r\\n      if (isValid(maxWidth)) {\\r\\n        return maxWidth[index] || 0\\r\\n      } else {\\r\\n        if (isValid(rMinColumns)) {\\r\\n          const calculated = Math.floor(\\r\\n            (clientWidth - (minColumns[index] - 1) * props.columnGap) /\\r\\n              minColumns[index]\\r\\n          )\\r\\n          if (Infinity === calculated) {\\r\\n            return clientWidth\\r\\n          }\\r\\n          return calculated\\r\\n        } else {\\r\\n          return Infinity\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      minWidth: takeMinWidth(),\\r\\n      maxWidth: takeMaxWidth(),\\r\\n      columns: target?.childNodes?.length,\\r\\n      colWrap: takeColwrap(),\\r\\n      minColumns: takeMinColumns(),\\r\\n      maxColumns: takeMaxColumns(),\\r\\n      clientWidth,\\r\\n    }\\r\\n  }\\r\\n\\r\\n  useLayoutEffect(() => {\\r\\n    const observer = () => {\\r\\n      if (!ref.current) return ;\\r\\n      const params = calculateSmartColumns(ref.current)\\r\\n      setLayout(params)\\r\\n      const style = getStyle({ columnGap, rowGap, layoutParams: params as any, ref })\\r\\n      if (!isEqual(style, styles)) {\\r\\n        setStyles(style)\\r\\n      }\\r\\n    }\\r\\n    const resizeObserver = new ResizeObserver(observer)\\r\\n    const mutationObserver = new MutationObserver(observer)\\r\\n    if (ref.current) {\\r\\n      resizeObserver.observe(ref.current)\\r\\n      mutationObserver.observe(ref.current, {\\r\\n        childList: true,\\r\\n      })\\r\\n    }\\r\\n    return () => {\\r\\n      if (!ref.current) return;\\r\\n      resizeObserver.unobserve(ref.current)\\r\\n      mutationObserver.disconnect()\\r\\n    }\\r\\n  }, [])\\r\\n  return {\\r\\n    ref,\\r\\n    formGridPrefixCls,\\r\\n    layoutParams,\\r\\n    styles,\\r\\n  }\\r\\n}\\r\\n\\r\\nconst getStyle = (props: IStyleProps): IStyle => {\\r\\n  const { columnGap, rowGap, layoutParams, ref } = props\\r\\n  // const max = layoutParams.maxWidth ? `${layoutParams.maxWidth}px` : '1fr';\\r\\n  const { clientWidth, minWidth, maxColumns, minColumns } = layoutParams as any\\r\\n  const getMinMax = (minWidth?: number, maxWidth?: number) => {\\r\\n    if (!minWidth || !maxWidth) return ;\\r\\n    let minmax: string\\r\\n    if (minWidth === Infinity) {\\r\\n      if (!isValid(maxWidth)) {\\r\\n        minmax = '1fr'\\r\\n      } else {\\r\\n        minmax = `minmax(0px,${maxWidth}px)`\\r\\n      }\\r\\n    } else {\\r\\n      minmax = `minmax(${minWidth}px,${\\r\\n        isValid(maxWidth) ? `${maxWidth}px` : '1fr'\\r\\n      })`\\r\\n    }\\r\\n    return minmax\\r\\n  }\\r\\n\\r\\n  const spans = Array.from(ref.current?.childNodes || []).reduce(\\r\\n    (buf, cur: any) => {\\r\\n      const span = isValid(maxColumns)\\r\\n        ? Math.min(\\r\\n            (Number(cur.getAttribute('data-span')) || 1) as number,\\r\\n            maxColumns\\r\\n          )\\r\\n        : Number(cur.getAttribute('data-span')) || 1\\r\\n      return buf + Number(span)\\r\\n    },\\r\\n    0\\r\\n  )\\r\\n\\r\\n  const calc = Math.floor((clientWidth + columnGap) / (minWidth + columnGap))\\r\\n  let finalColumns: number\\r\\n  finalColumns = Math.min(spans, calc)\\r\\n  if (isValid(maxColumns)) {\\r\\n    finalColumns = Math.min(spans, calc, maxColumns)\\r\\n  } else {\\r\\n    finalColumns = Math.min(spans, calc)\\r\\n  }\\r\\n\\r\\n  if (isValid(minColumns)) {\\r\\n    if (finalColumns < minColumns) {\\r\\n      finalColumns = minColumns\\r\\n    }\\r\\n  }\\r\\n\\r\\n  const style = {\\r\\n    gridTemplateColumns: `repeat(${finalColumns}, ${getMinMax(\\r\\n      layoutParams?.minWidth,\\r\\n      layoutParams?.maxWidth\\r\\n    )})`,\\r\\n    gridGap: `${rowGap}px ${columnGap}px`,\\r\\n  }\\r\\n  return style\\r\\n}\\r\\n\\r\\nexport const useGridSpan = (gridSpan = 1) => {\\r\\n  const params = useContext(FormGridContext)\\r\\n  if (!isValid(params)) {\\r\\n    return gridSpan\\r\\n  }\\r\\n  const {\\r\\n    colWrap,\\r\\n    columns = Infinity,\\r\\n    clientWidth,\\r\\n    minWidth,\\r\\n    columnGap,\\r\\n    maxColumns = Infinity,\\r\\n  } = params\\r\\n  const calc = Math.floor((clientWidth + columnGap) / (minWidth + columnGap)) // 算出实际一行最多能塞进的格子数\\r\\n  if (colWrap === true) {\\r\\n    if (Math.min(calc, columns) >= gridSpan) {\\r\\n      if (isValid(maxColumns)) {\\r\\n        return Math.min(gridSpan, maxColumns)\\r\\n      }\\r\\n      return gridSpan\\r\\n    } else {\\r\\n      if (isValid(maxColumns)) {\\r\\n        return Math.min(calc, columns, maxColumns)\\r\\n      }\\r\\n      return Math.min(calc, columns)\\r\\n    }\\r\\n  } else {\\r\\n    if (Math.min(calc, columns) >= gridSpan) {\\r\\n      if (isValid(maxColumns)) {\\r\\n        return Math.min(gridSpan, maxColumns)\\r\\n      }\\r\\n      return gridSpan\\r\\n    } else {\\r\\n      if (isValid(maxColumns)) {\\r\\n        return Math.min(calc, columns, maxColumns)\\r\\n      }\\r\\n      return Math.min(calc, columns)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const FormGrid: ComposedFormGrid = (props) => {\\r\\n  const normalizeProps = (props: IFormGridProps): ILayoutProps => {\\r\\n    const { breakpoints } = props\\r\\n\\r\\n    const intervals = breakpoints ? breakpoints.reduce((buf: any, cur, index, array) => {\\r\\n      if (index === array.length - 1) {\\r\\n        return [...buf, [array[index], Infinity]]\\r\\n      }\\r\\n      if (index === 0) {\\r\\n        return [...buf, [0, cur], [cur, array[index + 1]]]\\r\\n      }\\r\\n      return [...buf, [cur, array[index + 1]]]\\r\\n    }, []) as any : [];\\r\\n\\r\\n    const normalize = (prop: any) => {\\r\\n      if (isNum(prop) || isBool(prop)) {\\r\\n        return intervals.map(() => prop)\\r\\n      } else if (Array.isArray(prop)) {\\r\\n        let lastVal\\r\\n        return intervals.map((it, idx) => {\\r\\n          const res = isValid(prop[idx]) ? prop[idx] : lastVal\\r\\n          lastVal = isValid(prop[idx]) ? prop[idx] : lastVal\\r\\n          return res\\r\\n        })\\r\\n      } else {\\r\\n        return undefined\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      ...props,\\r\\n      intervals,\\r\\n      colWrap: normalize(props.colWrap),\\r\\n      minWidth: normalize(props.minWidth),\\r\\n      maxWidth: normalize(props.maxWidth),\\r\\n      minColumns: normalize(props.minColumns),\\r\\n      maxColumns: normalize(props.maxColumns),\\r\\n    }\\r\\n  }\\r\\n  const { children } = props\\r\\n  const normalizedProps = normalizeProps(props)\\r\\n  const { ref, formGridPrefixCls, layoutParams, styles } = useLayout(\\r\\n    normalizedProps\\r\\n  )\\r\\n  return (\\r\\n    <FormGridContext.Provider\\r\\n      value={{ columnGap: props.columnGap, ...layoutParams }}\\r\\n    >\\r\\n      <div\\r\\n        {...pickDataProps(props)}\\r\\n        className={cls(`${formGridPrefixCls}-layout`)}\\r\\n        style={styles}\\r\\n        ref={ref}\\r\\n      >\\r\\n        {children}\\r\\n      </div>\\r\\n    </FormGridContext.Provider>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport const GridColumn: React.FC<IGridColumnProps> = ({\\r\\n  gridSpan,\\r\\n  children,\\r\\n}) => {\\r\\n  const span = FormGrid.useGridSpan(gridSpan)\\r\\n  return (\\r\\n    <div style={{ gridColumnStart: `span ${span}` }} data-span={span || 1}>\\r\\n      {children}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nGridColumn.defaultProps = {\\r\\n  gridSpan: 1,\\r\\n}\\r\\n\\r\\nFormGrid.useGridSpan = useGridSpan\\r\\nFormGrid.GridColumn = GridColumn\\r\\n\\r\\nFormGrid.defaultProps = {\\r\\n  columnGap: 10,\\r\\n  rowGap: 5,\\r\\n  minColumns: 0,\\r\\n  minWidth: 100,\\r\\n  breakpoints: [S, MD, LG],\\r\\n  colWrap: true,\\r\\n}\\r\\n\\r\\nexport default FormGrid;\\r\\n\"]}"}
