{"version":3,"file":"index.js","sourceRoot":"lib/","sources":["form-collapse/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAgD;AAChD,oDAAwD;AACxD,8CAAyC;AAGzC,wCAKuB;AAEvB,0DAA4B;AAC5B,+CAA8C;AAC9C,0CAAuC;AAuBvC,IAAM,SAAS,GAAG;IAChB,IAAM,aAAa,GAAG,IAAA,gBAAQ,GAAE,CAAA;IAChC,IAAM,MAAM,GAAG,IAAA,sBAAc,GAAE,CAAA;IAC/B,IAAM,MAAM,GAAsD,EAAE,CAAA;IACpE,MAAM,CAAC,aAAa,CAAC,UAAC,MAAM,EAAE,IAAI;;QAChC,IAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;QAC5E,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,MAAK,MAAM,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,MAAK,QAAQ,EAAE;YAC5D,OAAM;SACP;QACD,IAAI,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,eAAe,CAAC,IAAG,CAAC,CAAC,EAAE;YACxD,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI,MAAA;gBACJ,KAAK,wBACA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,mBAAmB,CAAC,KAChC,GAAG,EAAE,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,mBAAmB,CAAC,0CAAE,GAAG,KAAI,IAAI,EAC/C,IAAI,EAAE,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,mBAAmB,CAAC,0CAAE,IAAI,KAAI,IAAI,GAClD;gBACD,MAAM,QAAA;aACP,CAAC,CAAA;SACH;IACH,CAAC,CAAC,CAAA;IACF,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,IAAM,kBAAkB,GAAG,UAAC,iBAA8B;IACxD,IAAM,YAAY,GAAG,IAAA,gBAAK,EAAC;QACzB,UAAU,EAAE,iBAAiB,IAAI,EAAE;QACnC,aAAa,YAAC,IAAgB;YAC5B,YAAY,CAAC,UAAU,GAAG,IAAI,CAAA;QAChC,CAAC;QACD,YAAY,YAAC,GAAc;YACzB,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;gBAC1C,IAAI,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACzC,OAAO,IAAI,CAAA;iBACZ;aACF;iBAAM,IAAI,YAAY,CAAC,UAAU,IAAI,GAAG,EAAE;gBACzC,OAAO,IAAI,CAAA;aACZ;YACD,OAAO,KAAK,CAAA;QACd,CAAC;QACD,YAAY,YAAC,GAAc;YACzB,IAAI,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;gBAClC,OAAM;aACP;YACD,YAAY,CAAC,UAAU,GAAG,IAAA,cAAK,EAAC,YAAY,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACtE,CAAC;QACD,eAAe,YAAC,GAAc;YAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;gBAC1C,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC,MAAM,CACtD,UAAC,IAAI,IAAK,OAAA,IAAI,IAAI,GAAG,EAAX,CAAW,CACtB,CAAA;aACF;iBAAM;gBACL,YAAY,CAAC,UAAU,GAAG,EAAE,CAAA;aAC7B;QACH,CAAC;QACD,eAAe,YAAC,GAAc;YAC5B,IAAI,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;gBAClC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;aAClC;iBAAM;gBACL,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;aAC/B;QACH,CAAC;KACF,CAAC,CAAA;IACF,OAAO,YAAY,CAAA;AACrB,CAAC,CAAA;AAEY,QAAA,YAAY,GAAyB,IAAA,gBAAQ,EACxD,UAAC,EAA0B;IAAxB,IAAA,YAAY,kBAAA,EAAK,KAAK,cAAxB,gBAA0B,CAAF;IACvB,IAAM,KAAK,GAAG,IAAA,gBAAQ,GAAE,CAAA;IACxB,IAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAC1B,IAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,UAAU,CAAC,CAAA;IAC1C,IAAM,aAAa,GAAG,IAAA,eAAO,EAC3B,cAAM,OAAA,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,kBAAkB,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAA1D,CAA0D,EAChE,CAAC,YAAY,EAAE,KAAK,CAAC,gBAAgB,CAAC,CACvC,CAAA;IACD,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,KAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,CAAA,CAAA;IAE9D,IAAM,YAAY,GAAG,UAAC,GAAc,EAAE,KAAU;QAC9C,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC;YACvC,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,UAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,OAAI;SAC1C,CAAC,CAAA;QACF,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,OAAO,CACL,8BAAC,iBAAK,IAAC,SAAS,EAAC,cAAc,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,IACjD,KAAK,CAAC,MAAM,CACP,CACT,CAAA;SACF;QACD,OAAO,KAAK,CAAC,MAAM,CAAA;IACrB,CAAC,CAAA;IACD,OAAO,CACL;QACE,2CAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAO;QACtC,8BAAC,oBAAQ,eACH,KAAK,IACT,SAAS,EAAE,IAAA,oBAAG,EAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,EAC1C,SAAS,EAAE,UAAG,SAAS,CAAgC,EACvD,QAAQ,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,CAAC;;gBACrB,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,sDAAG,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;gBAC/B,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,aAAa,8DAAG,GAAG,CAAC,CAAA;YACrC,CAAC,KAEA,MAAM,CAAC,GAAG,CAAC,UAAC,EAAuB,EAAE,KAAK;gBAA5B,KAAK,WAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAAA;YAAc,OAAA,CAC9C,8BAAC,oBAAQ,CAAC,IAAI,aACZ,GAAG,EAAE,KAAK,IACN,KAAK,IACT,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,EACjC,aAAa,EAAE,KAAK;gBAEpB,8BAAC,sBAAc,IAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GAAI,CAChC,CACjB;QAT+C,CAS/C,CAAC,CACO,CACP,CACP,CAAA;AACH,CAAC,CACF,CAAA;AAED,IAAM,aAAa,GAAgC,UAAC,EAAY;QAAV,QAAQ,cAAA;IAAO,OAAA,CACnE,8BAAC,gBAAQ,QAAE,QAAQ,CAAY,CAChC;AAFoE,CAEpE,CAAA;AAED,oBAAY,CAAC,aAAa,GAAG,aAAa,CAAA;AAC1C,oBAAY,CAAC,kBAAkB,GAAG,kBAAkB,CAAA;AAEpD,kBAAe,oBAAY,CAAA","sourcesContent":["import React, { Fragment, useMemo } from 'react'\nimport { Collapse, Badge } from '@arco-design/web-react'\nimport { model } from '@formily/reactive'\nimport { CollapseProps } from '@arco-design/web-react/es/collapse'\nimport { CollapseItemProps } from '@arco-design/web-react/es/collapse'\nimport {\n  useField,\n  observer,\n  useFieldSchema,\n  RecursionField,\n} from '@formily/react'\nimport { Schema, SchemaKey } from '@formily/json-schema'\nimport cls from 'classnames'\nimport { usePrefixCls } from '../__builtins__'\nimport { toArr } from '@formily/shared'\n\ntype ActiveKeys = string | number | Array<string | number>\n\ntype ActiveKey = string | number\ninterface IFormCollapse {\n  activeKeys: ActiveKeys\n  hasActiveKey(key: ActiveKey): boolean\n  setActiveKeys(key: ActiveKeys): void\n  addActiveKey(key: ActiveKey): void\n  removeActiveKey(key: ActiveKey): void\n  toggleActiveKey(key: ActiveKey): void\n}\n\ninterface IFormCollapseProps extends CollapseProps {\n  formCollapse?: IFormCollapse\n}\n\ntype ComposedFormCollapse = React.FC<IFormCollapseProps> & {\n  CollapsePanel?: React.FC<CollapseItemProps>\n  createFormCollapse?: (defaultActiveKeys?: ActiveKeys) => IFormCollapse\n}\n\nconst usePanels = () => {\n  const collapseField = useField()\n  const schema = useFieldSchema()\n  const panels: { name: SchemaKey; props: any; schema: Schema }[] = []\n  schema.mapProperties((schema, name) => {\n    const field = collapseField.query(collapseField.address.concat(name)).take()\n    if (field?.display === 'none' || field?.display === 'hidden') {\n      return\n    }\n    if (schema['x-component']?.indexOf('CollapsePanel') > -1) {\n      panels.push({\n        name,\n        props: {\n          ...schema?.['x-component-props'],\n          key: schema?.['x-component-props']?.key || name,\n          name: schema?.['x-component-props']?.name || name,\n        },\n        schema,\n      })\n    }\n  })\n  return panels\n}\n\nconst createFormCollapse = (defaultActiveKeys?: ActiveKeys) => {\n  const formCollapse = model({\n    activeKeys: defaultActiveKeys || [],\n    setActiveKeys(keys: ActiveKeys) {\n      formCollapse.activeKeys = keys\n    },\n    hasActiveKey(key: ActiveKey) {\n      if (Array.isArray(formCollapse.activeKeys)) {\n        if (formCollapse.activeKeys.includes(key)) {\n          return true\n        }\n      } else if (formCollapse.activeKeys == key) {\n        return true\n      }\n      return false\n    },\n    addActiveKey(key: ActiveKey) {\n      if (formCollapse.hasActiveKey(key)) {\n        return\n      }\n      formCollapse.activeKeys = toArr(formCollapse.activeKeys).concat(key)\n    },\n    removeActiveKey(key: ActiveKey) {\n      if (Array.isArray(formCollapse.activeKeys)) {\n        formCollapse.activeKeys = formCollapse.activeKeys.filter(\n          (item) => item != key\n        )\n      } else {\n        formCollapse.activeKeys = ''\n      }\n    },\n    toggleActiveKey(key: ActiveKey) {\n      if (formCollapse.hasActiveKey(key)) {\n        formCollapse.removeActiveKey(key)\n      } else {\n        formCollapse.addActiveKey(key)\n      }\n    },\n  })\n  return formCollapse\n}\n\nexport const FormCollapse: ComposedFormCollapse = observer(\n  ({ formCollapse, ...props }) => {\n    const field = useField()\n    const panels = usePanels()\n    const prefixCls = usePrefixCls('collapse')\n    const _formCollapse = useMemo(\n      () => formCollapse ?? createFormCollapse(props.defaultActiveKey),\n      [formCollapse, props.defaultActiveKey]\n    )\n    const activeKey = props.activeKey || _formCollapse?.activeKeys\n\n    const badgedHeader = (key: SchemaKey, props: any) => {\n      const errors = field.form.queryFeedbacks({\n        type: 'error',\n        address: `${field.address.concat(key)}.*`,\n      })\n      if (errors.length) {\n        return (\n          <Badge className=\"errors-badge\" count={errors.length}>\n            {props.header}\n          </Badge>\n        )\n      }\n      return props.header\n    }\n    return (\n      <div>\n        <div>{JSON.stringify(activeKey)}</div>\n        <Collapse\n          {...props}\n          className={cls(prefixCls, props.className)}\n          activeKey={`${activeKey}` as CollapseProps['activeKey']}\n          onChange={(key, keys, e) => {\n            props?.onChange?.(key, keys, e)\n            _formCollapse?.setActiveKeys?.(key)\n          }}\n        >\n          {panels.map(({ props, schema, name }, index) => (\n            <Collapse.Item\n              key={index}\n              {...props}\n              header={badgedHeader(name, props)}\n              destroyOnHide={false}\n            >\n              <RecursionField schema={schema} name={name} />\n            </Collapse.Item>\n          ))}\n        </Collapse>\n      </div>\n    )\n  }\n)\n\nconst CollapsePanel: React.FC<CollapseItemProps> = ({ children }) => (\n  <Fragment>{children}</Fragment>\n)\n\nFormCollapse.CollapsePanel = CollapsePanel\nFormCollapse.createFormCollapse = createFormCollapse\n\nexport default FormCollapse\n"]}