{"version":3,"file":"moment.js","sourceRoot":"lib/","sources":["__builtins__/moment.ts"],"names":[],"mappings":";;;;;;AAAA,0CAA6C;AAC7C,gDAAyB;AAElB,IAAM,UAAU,GAAG,UAAC,KAAU,EAAE,MAAe;IACpD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAA,eAAK,EAAC,GAAG,EAAE,MAAM,CAAC,EAAlB,CAAkB,CAAC;QACxC,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,IAAA,eAAK,EAAC,KAAK,EAAE,MAAM,CAAC;YACtB,CAAC,CAAC,KAAK,CAAA;AACX,CAAC,CAAA;AANY,QAAA,UAAU,cAMtB;AAEM,IAAM,iBAAiB,GAAG,UAC/B,KAAU,EACV,MAAW,EACX,WAAoB;IAEpB,IAAM,UAAU,GAAG,UAAC,IAAS,EAAE,MAAW,EAAE,CAAK;QAAL,kBAAA,EAAA,KAAK;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,WAAW,CAAA;QAC7B,IAAI,IAAA,cAAK,EAAC,MAAM,CAAC,EAAE;YACjB,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,IAAI,IAAA,aAAI,EAAC,OAAO,CAAC,EAAE;gBACjB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;aACrB;YACD,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;SAClD;aAAM;YACL,IAAI,IAAA,aAAI,EAAC,MAAM,CAAC,EAAE;gBAChB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA;aACpB;YACD,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;SACjD;IACH,CAAC,CAAA;IACD,IAAI,IAAA,cAAK,EAAC,KAAK,CAAC,EAAE;QAChB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK;YAC1B,OAAO,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;KACH;SAAM;QACL,OAAO,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,WAAW,CAAA;KAChE;AACH,CAAC,CAAA;AA3BY,QAAA,iBAAiB,qBA2B7B","sourcesContent":["import { isArr, isFn } from '@formily/shared'\r\nimport DayJs from 'dayjs'\r\n\r\nexport const momentable = (value: any, format?: string) => {\r\n  return Array.isArray(value)\r\n    ? value.map((val) => DayJs(val, format))\r\n    : value\r\n    ? DayJs(value, format)\r\n    : value\r\n}\r\n\r\nexport const formatMomentValue = (\r\n  value: any,\r\n  format: any,\r\n  placeholder?: string\r\n): string | string[] => {\r\n  const formatDate = (date: any, format: any, i = 0) => {\r\n    if (!date) return placeholder\r\n    if (isArr(format)) {\r\n      const _format = format[i]\r\n      if (isFn(_format)) {\r\n        return _format(date)\r\n      }\r\n      return date?.format ? date.format(_format) : date\r\n    } else {\r\n      if (isFn(format)) {\r\n        return format(date)\r\n      }\r\n      return date?.format ? date.format(format) : date\r\n    }\r\n  }\r\n  if (isArr(value)) {\r\n    return value.map((val, index) => {\r\n      return formatDate(val, format, index)\r\n    })\r\n  } else {\r\n    return value ? formatDate(value, format) : value || placeholder\r\n  }\r\n}"]}