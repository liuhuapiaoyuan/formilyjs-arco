{"version":3,"file":"portal.js","sourceRoot":"lib/","sources":["__builtins__/portal.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAuC;AACvC,qDAAkD;AAClD,8CAA8C;AAC9C,wCAAyC;AAKzC,IAAM,SAAS,GAAG,IAAA,qBAAU,EAAC,IAAI,GAAG,EAAoC,CAAC,CAAA;AAElE,IAAM,oBAAoB,GAAG,UAAC,EAAmB;IACtD,IAAM,MAAM,GAAG,UAAC,KAA4C;QAC1D,IAAI,KAAK,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;YACxC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;SAC9B;QAED,OAAO,CACL,8BAAC,gBAAQ;YACN,KAAK,CAAC,QAAQ;YACf,8BAAC,gBAAQ,QACN;gBACC,IAAI,CAAC,KAAK,CAAC,EAAE;oBAAE,OAAO,IAAI,CAAA;gBAC1B,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;gBACtC,IAAI,MAAM;oBAAE,OAAO,IAAA,wBAAY,EAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;gBACtD,OAAO,IAAI,CAAA;YACb,CAAC,CACQ,CACF,CACZ,CAAA;IACH,CAAC,CAAA;IACD,MAAM,CAAC,YAAY,GAAG;QACpB,EAAE,IAAA;KACH,CAAA;IACD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAxBY,QAAA,oBAAoB,wBAwBhC;AAED,SAAgB,gBAAgB,CAC9B,IAAiB,EACjB,EAAU;IAEV,SAAS,MAAM,CAAC,QAAkB;QAChC,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACrB,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC,CAAA;SAChC;aAAM,IAAI,IAAI,EAAE;YACf,mBAAQ,CAAC,MAAM,CAAC,8BAAC,gBAAQ,QAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAY,EAAE,IAAI,CAAC,CAAA;SAC3D;IACH,CAAC;IAED,SAAS,OAAO;;QACd,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACrB,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;SACxB;aAAM,IAAI,IAAI,EAAE;YACf,mBAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;YACrC,MAAA,IAAI,CAAC,UAAU,0CAAE,WAAW,CAAC,IAAI,CAAC,CAAA;SACnC;IACH,CAAC;IAED,OAAO;QACL,MAAM,QAAA;QACN,OAAO,SAAA;KACR,CAAA;AACH,CAAC;AAzBD,4CAyBC","sourcesContent":["import React, { Fragment } from 'react'\r\nimport ReactDOM, { createPortal } from 'react-dom'\r\nimport { observable } from '@formily/reactive'\r\nimport { Observer } from '@formily/react'\r\nexport interface IPortalProps {\r\n  id?: string | symbol\r\n}\r\n\r\nconst PortalMap = observable(new Map<string | symbol, React.ReactNode>())\r\n\r\nexport const createPortalProvider = (id: string | symbol) => {\r\n  const Portal = (props: React.PropsWithChildren<IPortalProps>) => {\r\n    if (props.id && !PortalMap.has(props.id)) {\r\n      PortalMap.set(props.id, null)\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {props.children}\r\n        <Observer>\r\n          {() => {\r\n            if (!props.id) return null\r\n            const portal = PortalMap.get(props.id)\r\n            if (portal) return createPortal(portal, document.body)\r\n            return null\r\n          }}\r\n        </Observer>\r\n      </Fragment>\r\n    )\r\n  }\r\n  Portal.defaultProps = {\r\n    id,\r\n  }\r\n  return Portal\r\n}\r\n\r\nexport function createPortalRoot<T extends React.ReactNode>(\r\n  host: HTMLElement,\r\n  id: string\r\n) {\r\n  function render(renderer?: () => T) {\r\n    if (PortalMap.has(id)) {\r\n      PortalMap.set(id, renderer?.())\r\n    } else if (host) {\r\n      ReactDOM.render(<Fragment>{renderer?.()}</Fragment>, host)\r\n    }\r\n  }\r\n\r\n  function unmount() {\r\n    if (PortalMap.has(id)) {\r\n      PortalMap.set(id, null)\r\n    } else if (host) {\r\n      ReactDOM.unmountComponentAtNode(host)\r\n      host.parentNode?.removeChild(host)\r\n    }\r\n  }\r\n\r\n  return {\r\n    render,\r\n    unmount,\r\n  }\r\n}\r\n"]}